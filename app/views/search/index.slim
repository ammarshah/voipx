section.search-route-section
  .search-section
    .container
      .search-heading.voipx-heading
        h2
          | Search 
          span Route
      .search-form
        = simple_form_for @search, url: search_path, method: :get do |f|
          p.text-danger.text-center style="font-size: 18px;"
            = f.object.errors.first.try(:second)
          .col-md-6
            .form-group
              = autocomplete_field_tag 'search[destination]', params[:search].try(:[], :destination), autocomplete_breakout_destination_dashboard_index_path, data: {showNoMatches: false, 'auto-focus': true}, update_elements: {id: '#search_breakout_id', code: '#search_breakout'}, class: 'form-control add_to_my_routes_input', placeholder: 'Route Name'
          .col-md-6
            .form-group
              = autocomplete_field_tag 'search[breakout]', params[:search].try(:[], :breakout), autocomplete_breakout_code_dashboard_index_path, data: {showNoMatches: false, 'auto-focus': true}, update_elements: {id: '#search_breakout_id', destination: '#search_destination'}, class: 'form-control add_to_my_routes_input', placeholder: 'Breakout', 'min-length': 1
          = f.input :breakout_id, as: :hidden
          .col-md-4
            .form-group
              = f.input :price, as: :integer, placeholder: '0.000', input_html: {min: '0.001', max: '9.999', step: '0.001', class: 'form-control add_to_my_routes_input'}, label: false, wrapper: false, error: false
          .col-md-4
            .form-group
              = f.select :quality_type, [['CLI', 'cli'], ['NON-CLI', 'non_cli'], ['Any', 'any']], {}, {class: 'form-control add_to_my_routes_input'}
          .col-md-4
            .form-group
              = f.select :purchase_type, [['Buy', 'buy'], ['Sell', 'sell'], ['Any', 'any']], {}, {class: 'form-control add_to_my_routes_input'}
          .sarch-btn.col-md-12
            = f.submit "SHOW MATCHES", name: nil, class: "btn btn-default"
        - if user_signed_in? && @search.valid?
          div id='add_to_my_routes_link' class='pull-right'
            = button_to "Add to My Routes", add_to_my_routes_path, method: :post, class: "btn btn-link", params: {  purchase_type: @search.purchase_type,
                                                                                                                    quality_type: @search.quality_type,
                                                                                                                    price: @search.price,
                                                                                                                    breakout_id: @search.breakout_id }

section.search-routes-table
  .container
    - if defined?(@routes)
      .search-heading.voipx-heading
        h2 style=("margin-bottom: 0px;") 
          | Search 
          span Results
        span
          strong #{@routes.size.to_s} 
          | search results 
          - if params[:search].try(:[], :destination).present?
            | for 
            strong #{params[:search].try(:[], :destination)}
      - if @routes.any?
        .search-routes-tab-inner
          .srt-head.hidden-xs
            .row
              .col-xs-1
              .col-xs-3 Route Name
              .col-xs-5
              .col-xs-2.text-center Buyer/Seller
              .col-xs-1.text-center
          .srt-head.visible-xs
            .row
              .col-xs-12.text-center Route
          .srt-body
            - @routes.each do |route|
              .row.tab-row
                .col-xs-6.col-md-4
                  .row
                    .col-xs-3.text-center.no-padding
                      = image_tag "icon-magnifying-glass.png"
                    .col-xs-9
                      span.route-name #{route.breakout.destination}
                    .col-xs-12.visible-xs.margin-tp-10
                      = link_to user_path(route.user), target: "_blank" do
                        i.fa.fa-user.col-xs-3.text-center.no-padding aria-hidden="true"
                        |  #{route.user.name}
                .col-xs-6.col-md-5.route-info
                  span
                    | Breakout: 
                    span #{route.breakout.code}
                  span
                    | Type: 
                    span #{route.quality_type.upcase.tr('_', '-')}
                  span
                    | Price: 
                    span $#{route.price}
                  span
                    | Buy/Sell: 
                    span #{route.purchase_type.humanize}
                .col-xs-2.text-center.buyer-name.hidden-xs
                  = link_to user_path(route.user), target: "_blank" do
                    i.fa.fa-user aria-hidden="true"
                    |  #{route.user.name}
                - if user_signed_in?
                  .col-xs-1.text-center
                    span id="favorite_#{route.id}"
                      - if current_user.favorites.pluck(:route_id).include?(route.id)
                        = link_to current_user.favorites.where(route_id: route.id).first, method: :delete, title: "Remove from favorites", remote: true do
                          = image_tag "star-icon.png"
                      - else
                        = link_to favorites_path(route_id: route.id), method: :post, title: "Add to favorites", remote: true do
                          = image_tag "star-icon-unfilled.png"
                    
                    - purchase_sentence = route.purchase_type.humanize + 'ing at $' + route.price.to_s
                    - subject = route.breakout.destination + ' (' + route.breakout.code + ')' + ' - ' + route.quality_type.upcase + ' - ' + purchase_sentence

                    = link_to image_tag("message-icon.png"), "#", data: { toggle: 'modal', target: '#message-modal', recipient: "#{route.user.id}", subject: "#{subject}", profile_url: "#{url_for(route.user)}", photo_url: "#{route.user.photo.url(:thumb)}", name: "#{route.user.name}", purchase_sentence: "#{purchase_sentence}", destination: "#{route.breakout.destination}", breakout: "#{route.breakout.code}", price: "#{route.price}", quality_type: "#{route.quality_type.upcase}" }
          - if @more_matches
            br
            p Register and login to see more matches for this route.
    - else
      .search-heading.voipx-heading
        h2 style=("margin-bottom: 0px;") 
          | Search 
          span Results
        span Please search to see matches

== render "shared/message_modal"


javascript:
  $(function(){
    $('#message-modal').on('shown.bs.modal', function(e) {
      var button, breakout, destination, name, photo_url, price, profile_url, purchase_sentence, quality_type, recipient_id, subject;
      button = $(e.relatedTarget);
      profile_url = button.data('profile-url');
      photo_url = button.data('photo-url');
      name = button.data('name');
      purchase_sentence = button.data('purchase-sentence');
      destination = button.data('destination');
      breakout = button.data('breakout');
      quality_type = button.data('quality-type');
      recipient_id = button.data('recipient');
      subject = button.data('subject');
      $("#match_profile_url").attr("href", profile_url);
      $("#match_photo_url").attr("src", photo_url);
      $("#match_name").html(name);
      $(".match_purchase_sentence").html(purchase_sentence);
      $("#match_destination").html(destination);
      $("#match_breakout").html(breakout);
      $("#match_quality_type").html(quality_type);
      $("#conversation_recipient").val(recipient_id);
      $("#conversation_subject").val(subject);
      return
    });
  });


/ #center-content
/   h2 Search Routes
/   br
/   br

/   = simple_form_for :search, url: search_path, method: :get, html: {class: 'form-inline justify-content-center'} do |f|
/     .form-group
/       = f.select :purchase_type, [['I want to Buy', 'buy'], ['I want to Sell', 'sell'], ['Any', 'any']], {selected: params[:search].try(:[], :purchase_type)}, {class: 'form-control mr-sm-2'}
      
/       = autocomplete_field_tag 'search[destination]', params[:search].try(:[], :destination), autocomplete_breakout_destination_dashboard_index_path, data: {showNoMatches: false, 'auto-focus': true}, update_elements: {code: '#search_breakout'}, class: 'form-control mr-sm-2', placeholder: 'Route Name'

/       = autocomplete_field_tag 'search[breakout]', params[:search].try(:[], :breakout), autocomplete_breakout_code_dashboard_index_path, data: {showNoMatches: false, 'auto-focus': true}, update_elements: {destination: '#search_destination'}, class: 'form-control mr-sm-2', placeholder: 'Breakout'

/       .input-group.mb-2.mr-sm-2.mb-sm-0
/         .input-group-addon $
/         = f.input :price, as: :integer, class: 'form-control', placeholder: '0.000', input_html: {min: '0.001', max: '9.999', step: '0.001', value: params[:search].try(:[], :price)}, label: false, wrapper: false
      
/       = f.select :quality_type, [['CLI', 'cli'], ['NON-CLI', 'non_cli'], ['Any', 'any']], {selected: params[:search].try(:[], :quality_type)}, {class: 'form-control mr-sm-2'}

/       = f.submit "Show Matches", name: nil, class: 'btn btn-primary mb-2 mr-sm-2 mb-sm-0'
/ br
/ br
/ br
/ br
/ br
/ br
/ .row
/   .col-md-12
/     table.table.table-sm.table-bordered.table-hover
/       thead.thead-inverse
/         tr
/           th Routes
/           th Breakouts
/           th Price
/           th Type
/           th Buy/Sell
/           th User Profile
/       tbody
/         - if defined?(@routes)
/           - if @routes.any?
/             - @routes.each do |route|
/               tr
/                 td #{route.breakout.destination}
/                 td #{route.breakout.code}
/                 td $#{route.price}
/                 td #{route.quality_type.upcase}
/                 td #{route.purchase_type.humanize}
/                 td
/                   = link_to route.user.name, user_path(route.user), target: "_blank"
/           - else
/             tr
/               td colspan="6" No matches found
/         - else
/           tr
/             td colspan="6" Please search to see matches